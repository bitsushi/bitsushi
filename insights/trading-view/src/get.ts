import zip from "lodash/zip";
import fetch from "node-fetch";

enum Duration {
  "1_MINUTE" = 1,
  "5_MINUTES" = 5,
  "15_MINUTES" = 15,
  "1_HOUR" = 60,
  "4_HOURS" = 240,
  "1_DAY" = 0,
  "1_WEEK" = "1W",
  "1_MONTH" = "1M",
}

export async function get({
  symbol,
  columns = [
    "Recommend.Other",
    "Recommend.All",
    "Recommend.MA",
    "RSI",
    "RSI[1]",
    "Stoch.K",
    "Stoch.D",
    "Stoch.K[1]",
    "Stoch.D[1]",
    "CCI20",
    "CCI20[1]",
    "ADX",
    "ADX+DI",
    "ADX-DI",
    "ADX+DI[1]",
    "ADX-DI[1]",
    "AO",
    "AO[1]",
    "Mom",
    "Mom[1]",
    "MACD.macd",
    "MACD.signal",
    "Rec.Stoch.RSI",
    "Stoch.RSI.K",
    "Rec.WR",
    "W.R",
    "Rec.BBPower",
    "BBPower",
    "Rec.UO",
    "UO",
    "EMA5",
    "close",
    "SMA5",
    "EMA10",
    "SMA10",
    "EMA20",
    "SMA20",
    "EMA30",
    "SMA30",
    "EMA50",
    "SMA50",
    "EMA100",
    "SMA100",
    "EMA200",
    "SMA200",
    "Rec.Ichimoku",
    "Ichimoku.BLine",
    "Rec.VWMA",
    "VWMA",
    "Rec.HullMA9",
    "HullMA9",
    "Pivot.M.Classic.S3",
    "Pivot.M.Classic.S2",
    "Pivot.M.Classic.S1",
    "Pivot.M.Classic.Middle",
    "Pivot.M.Classic.R1",
    "Pivot.M.Classic.R2",
    "Pivot.M.Classic.R3",
    "Pivot.M.Fibonacci.S3",
    "Pivot.M.Fibonacci.S2",
    "Pivot.M.Fibonacci.S1",
    "Pivot.M.Fibonacci.Middle",
    "Pivot.M.Fibonacci.R1",
    "Pivot.M.Fibonacci.R2",
    "Pivot.M.Fibonacci.R3",
    "Pivot.M.Camarilla.S3",
    "Pivot.M.Camarilla.S2",
    "Pivot.M.Camarilla.S1",
    "Pivot.M.Camarilla.Middle",
    "Pivot.M.Camarilla.R1",
    "Pivot.M.Camarilla.R2",
    "Pivot.M.Camarilla.R3",
    "Pivot.M.Woodie.S3",
    "Pivot.M.Woodie.S2",
    "Pivot.M.Woodie.S1",
    "Pivot.M.Woodie.Middle",
    "Pivot.M.Woodie.R1",
    "Pivot.M.Woodie.R2",
    "Pivot.M.Woodie.R3",
    "Pivot.M.Demark.S1",
    "Pivot.M.Demark.Middle",
    "Pivot.M.Demark.R1",
  ],
  duration = Duration["5_MINUTES"],
}: {
  symbol: string;
  columns?: string[];
  duration?: Duration;
}): Promise<{ symbol: string; duration: Duration; data: object }> {
  const response = await fetch("https://scanner.tradingview.com/crypto/scan", {
    headers: {
      accept: "*/*",
      "accept-language": "en-US",
      "cache-control": "no-cache",
      "content-type": "application/x-www-form-urlencoded",
      pragma: "no-cache",
      "sec-fetch-dest": "empty",
      "sec-fetch-mode": "cors",
      "sec-fetch-site": "same-site",
      // cookie:
      //   "_sp_ses.cf1a=*; _sp_id.cf1a=20d689d8-f529-4cf3-bf8b-b33f0bd4793a.1607336499.2.1607341587.1607337452.5876a32a-bdcb-4831-95b2-4951e91f9822",
    },
    // referrer: "https://s.tradingview.com/",
    // referrerPolicy: "origin-when-cross-origin",
    // mode: "cors",
    body: `{"symbols":{"tickers":["${symbol}"],"query":{"types":[]}},"columns":[${columns
      .map((x) => `"${[x, duration].filter(Boolean).join("|")}"`)
      .join(",")}]}`,
    method: "POST",
  });

  const json = await response.json();

  return {
    symbol,
    duration,
    data: zip(columns, json.data[0].d),
  };
}
